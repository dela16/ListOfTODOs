@page
@model ListOfTODOs.Pages.ItemIndexModel
@{
    ViewData["Title"] = "ToDo List";
}

<form id="add-item-form">
	Activity: <input type="text" name="ItemToDo" value="" placeholder="Add an activity"/> <button class="btn btn-dark" id="post-item">Add item</button>
</form>

<form id="list-items-form">
	<nav id="taskList">
		<ul class="mt-3" id="itemsOnToDoList">
		</ul>
	</nav>
</form>

<form id="delete-item-form">
	Id: <input type="number" name="ItemToDelete" value="" placeholder="What id to delete?" /> <button class="btn btn-success" id="delete-item">Complete Task / Remove</button>
</form>


<form id="item-to-edit-form">
	Id: <input type="number" name="ItemId" value="" placeholder="What id to edit?"/>
	Edit: <input type="text" name="ItemToEdit" value="" placeholder="Re-write your task"/> <button class="btn btn-dark" id="edit-item">Edit</button>
</form>
<div>
	<br />
	<h2>Info</h2>
	<p>Om du bara vill markera bort en aktivitet så bockar du av rutan. <br>
		Vill du radera en aktivitet helt från listan och databasen så skriver du in Id längre ner och klickar på den gröna knappen. 
		<br />
		För framtiden: 
		<br />
		- Ibland behöver du ladda om sidan för att få listan uppdaterad, ibland inte. Trots async/await.
		<br />
		- Få till bättre och snyggare li och checkbox som går att duplicera, med hjälp av html på något sätt(?).
		<br />
		- Det ska räcka med att markera en ruta/ flera rutor och klicka delete för att radera. Inte behöva skriva in ID. 
		<br />
		- Snygga till HTML med ordentliga taggar och divs etc. 
	</p>
</div>



@section Scripts{
	<script>
        const postItemBtn = document.getElementById("post-item")
		const itemsOnToDoList = document.getElementById("itemsOnToDoList")
		const deleteItemBtn = document.getElementById("delete-item")
		const editItemBtn = document.getElementById("edit-item")
		const getFromDatabasebtn = document.getElementById("getFromDatabase")


		async function updateItemList(){
			fetch("/items")
			.then(respons => respons.json())
			.then(data => {
				for(let i = 0; i < data.length; i++){
					const checkbox = document.createElement("input")
					const li = document.createElement("li");
					checkbox.type = "checkbox";
					checkbox.addEventListener('click', () => {
						if(checkbox.checked){
							li.style.textDecoration = "line-through" 
						}
						else{
							li.style.textDecoration = "none"
						}
					});
						
					li.innerText = `Id: ${data[i].id} - ${data[i].activity}`
					li.appendChild(checkbox)
					itemsOnToDoList.appendChild(li)
				}
			})
		}

		postItemBtn.addEventListener('click', async () => {
			let postItemForm = document.getElementById("add-item-form").elements

			let itemInfo =
			{
				Activity: postItemForm.namedItem("ItemToDo").value
			}
			
			let clearInputField = {
				Activity: postItemForm.namedItem("ItemToDo").value=''
			}

			let result = await postFunction("/items", itemInfo)
			if(result.status != 200){
				alert(`status = ${result.status}. Could not add item, try again.`)
			}

			await updateItemList()
        })

		async function postFunction(url = '', data = {}){
			return fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			})
		}

		editItemBtn.addEventListener('click', async () => {
			let editItemForm = document.getElementById("item-to-edit-form").elements
			let editItemId = editItemForm.namedItem("ItemId").value
			let editItemInfo = {Activity: editItemForm.namedItem("ItemToEdit").value}

			let clearInputField = {
				Activity: editItemForm.namedItem("ItemToEdit").value=''
			}
			
			let result = await putItemInfo("/items/" + editItemId, editItemInfo)
			if (result.status != 200) {
				alert(`status = ${result.status}. Could not edit info, please try again.`)
			}
			await updateItemList()
		})
			
		async function putItemInfo (url = '', data = {}){
			console.log(JSON.stringify(data))
			return fetch(url,{
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			})
		}

		deleteItemBtn.addEventListener('click', async () => { 
			let deleteItemForm = document.getElementById("delete-item-form").elements

			let deleteItemInfo = deleteItemForm.namedItem("ItemToDelete").value

			let clearInputField = {
				Activity: deleteItemForm.namedItem("ItemToDelete").value = ''
			};

			let result = await deleteFunction("/items/" + deleteItemInfo, {})
		
			if (result.status != 200)
			{
				alert(`status = ${result.status}. Invalid id, please try again.`)
			}

			await updateItemList()
		})

		async function deleteFunction(url = '', data = {}){
			return fetch(url, {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			})
		}

		updateItemList()
		
    </script>
}