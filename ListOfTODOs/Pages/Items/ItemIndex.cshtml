@page
@model ListOfTODOs.Pages.ItemIndexModel
@{
    ViewData["Title"] = "ToDo List";
}

<form id="add-item-form">
    Activity: <input type="text" name="ItemToDo" value="" />
</form>

<button class="btn btn-dark" id="post-item">Add item</button>

<form id="list-items-form">
@*	<input type="checkbox" id="itemsOnToDoList" name="activity" />*@
	<ul class="mt-3" id="itemsOnToDoList"> </ul> 
</form>

<form id="delete-item-form">
	Id: <input type="number" name="ItemToDelete" value="" />
</form>
<button class="btn btn-danger" id="delete-item">Delete</button>

@section Scripts{
	<script>
        let postItemBtn = document.getElementById("post-item");
		let itemsOnToDoList = document.getElementById("itemsOnToDoList");
		let deleteItemBtn = document.getElementById("delete-item");

		const showAllItemsOnList = () => {
			fetch("/items")
			.then(respons => respons.json())
			.then(data => {
				for(let i = 0; i < data.length; i++){
					const li = document.createElement("li");
					li.innerText = `Id: ${data[i].id} - ${data[i].activity}`;
					itemsOnToDoList.appendChild(li);
				}
			})
		};

		showAllItemsOnList();

		postItemBtn.addEventListener('click', () => {
			const postItemForm = document.getElementById("add-item-form").elements;

			const itemInfo =
			{
				Activity: postItemForm.namedItem("ItemToDo").value,
			};
			postItemInfo("/items", itemInfo);
			showAllItemsOnList();//Hela listan läggs på på nytt plus att den sista inte syns ännu. 
        });

			//Är det här som vi lägger till det i databasen? Eller vad gör detta? SKriver till fil? 
			const postItemInfo = (url = '', data = {}) => {
			console.log(JSON.stringify(data))
			fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			})
				.then(response => console.log(response));
		}

		deleteItemBtn.addEventListener('click', () => {
			const deleteItemForm = document.getElementById("delete-item-form").elements;

			const deleteItemInfo = deleteItemForm.namedItem("ItemToDelete").value;

			deleteFunction("/items/" + deleteItemInfo, {});
			showAllItemsOnList();
			});

		const deleteFunction = (url = '', data = {}) => { //Återigen, kolla vad denna gör. Behöver jag den? 
			console.log(JSON.stringify(data))
			fetch(url, {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			})
				.then(response => console.log(response));
		}


    </script>
}